test_mat
loc_max <- find_local_max(x = test_mat)
test_mat[loc_max]
find_local_max <- function(x) {
## Convert it to a raster object
r <- raster(x)
extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
loc_max_out <- list(
x_ind <- maxXY[, 'x'],
y_ind <- ncol(x) - maxXY[, 'y'],
z_ind <- rep(NA, nrow(maxXY))
)
# Append value of objective at local maxima.
for (row in 1:nrow(maxXY)) {
loc_max_out$z_ind[row] <- x[loc_max_out$x_ind[row], loc_max_out$y_ind[row]]
}
return(loc_max_out)
}
loc_max <- find_local_max(x = test_mat)
loc_max
find_local_max <- function(x) {
## Convert it to a raster object
r <- raster(x)
extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
loc_max_out <- list(
x_ind <- maxXY[, 'x'],
y_ind <- ncol(x) - maxXY[, 'y'] + 1,
z_ind <- rep(NA, nrow(maxXY))
)
# Append value of objective at local maxima.
for (row in 1:nrow(maxXY)) {
loc_max_out$z_ind[row] <- x[loc_max_out$x_ind[row], loc_max_out$y_ind[row]]
}
return(loc_max_out)
}
loc_max <- find_local_max(x = test_mat)
loc_max
x
## Convert it to a raster object
r <- raster(x)
extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
loc_max_out <- list(
x_ind <- maxXY[, 'x'],
y_ind <- ncol(x) - maxXY[, 'y'] + 1,
z_ind <- rep(NA, nrow(maxXY))
)
row
loc_max_out$x_ind[i]
i <- 1
loc_max_out$x_ind[i]
loc_max_out$x_ind
loc_max_out <- list(
x_ind <- maxXY[, 'x'],
y_ind <- ncol(x) - maxXY[, 'y'] + 1,
z_ind <- rep(NA, nrow(maxXY))
)
loc_max_out
loc_max_out$x_ind
loc_max_out <- list(
x_ind = maxXY[, 'x'],
y_ind = ncol(x) - maxXY[, 'y'] + 1,
z_ind = rep(NA, nrow(maxXY))
)
loc_max_out$x_ind[i]
loc_max_out$y_ind[i]
x[loc_max_out$x_ind[i], loc_max_out$y_ind[i]]
# Append value of objective at local maxima.
for (i in 1:nrow(maxXY)) {
loc_max_out$z_ind[i] <- x[loc_max_out$x_ind[i], loc_max_out$y_ind[i]]
}
loc_max_out
find_local_max <- function(x) {
## Convert it to a raster object
r <- raster(x)
extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
loc_max_out <- list(
x_ind = maxXY[, 'x'],
y_ind = ncol(x) - maxXY[, 'y'] + 1,
z_ind = rep(NA, nrow(maxXY))
)
# Append value of objective at local maxima.
for (i in 1:nrow(maxXY)) {
loc_max_out$z_ind[i] <- x[loc_max_out$x_ind[i], loc_max_out$y_ind[i]]
}
return(loc_max_out)
}
test_1 <- c(1,1,2,3,3,2,1,1,5,6,7,7,4,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_1))
loc_max <- find_local_max(x = test_mat)
loc_max
test_mat
test_2 <- c(1,1,2,2,3,3,4,3,2,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_2))
test_mat
loc_max <- find_local_max(x = test_mat)
loc_max
x = test_mat
## Convert it to a raster object
r <- raster(x)
extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
loc_max_out <- list(
x_ind = maxXY[, 'x'],
y_ind = ncol(x) - maxXY[, 'y'] + 1,
z_ind = rep(NA, nrow(maxXY))
)
loc_max_out
## Convert it to a raster object
r <- raster(x)
# extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
extent(r) <- extent(c(0, ncol(x), 0, nrow(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
loc_max_out <- list(
x_ind = maxXY[, 'x'],
y_ind = ncol(x) - maxXY[, 'y'] + 1,
z_ind = rep(NA, nrow(maxXY))
)
loc_max_out
maxXY
ncol(x)
loc_max_out <- list(
x_ind = maxXY[, 'x'],
# y_ind = ncol(x) - maxXY[, 'y'] + 1,
y_ind = nrow(x) - maxXY[, 'y'] + 1,
z_ind = rep(NA, nrow(maxXY))
)
loc_max_out
for (i in 1:nrow(maxXY)) {
loc_max_out$z_ind[i] <- x[loc_max_out$x_ind[i], loc_max_out$y_ind[i]]
}
loc_max_out
# Append value of objective at local maxima.
for (i in 1:nrow(maxXY)) {
# loc_max_out$z_ind[i] <- x[loc_max_out$x_ind[i], loc_max_out$y_ind[i]]
loc_max_out$z_ind[i] <- x[loc_max_out$y_ind[i], loc_max_out$x_ind[i]]
}
loc_max_out
find_local_max <- function(x) {
## Convert it to a raster object
r <- raster(x)
# extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
extent(r) <- extent(c(0, ncol(x), 0, nrow(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
loc_max_out <- list(
x_ind = maxXY[, 'x'],
# y_ind = ncol(x) - maxXY[, 'y'] + 1,
y_ind = nrow(x) - maxXY[, 'y'] + 1,
z_ind = rep(NA, nrow(maxXY))
)
# Append value of objective at local maxima.
for (i in 1:nrow(maxXY)) {
# loc_max_out$z_ind[i] <- x[loc_max_out$x_ind[i], loc_max_out$y_ind[i]]
loc_max_out$z_ind[i] <- x[loc_max_out$y_ind[i], loc_max_out$x_ind[i]]
}
return(loc_max_out)
}
test_1 <- c(1,1,2,3,3,2,1,1,5,6,7,7,4,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_1))
loc_max <- find_local_max(x = test_mat)
# test_mat[loc_max]
loc_max
test_2 <- c(1,1,2,2,3,3,4,3,2,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_2))
loc_max <- find_local_max(x = test_mat)
loc_max
test_mat
length(test_2)
length(test_1)
matrix(runif(length(test_1)*length(test_1)),
nrow = length(test_1), ncol = length(test_2))
matrix(runif(length(test_1)*length(test_2)),
nrow = length(test_1), ncol = length(test_2))
test_2 <- c(1,1,2,2,3,3,4,3,2,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_2))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_2)),
nrow = length(test_1), ncol = length(test_2))
loc_max <- find_local_max(x = test_mat)
test_mat
test_mat
loc_max
find_local_max <- function(x) {
## Convert it to a raster object
r <- raster(x)
# extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
extent(r) <- extent(c(0, ncol(x), 0, nrow(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
loc_max_out <- list(
y_ind = maxXY[, 'x'],
# y_ind = ncol(x) - maxXY[, 'y'] + 1,
x_ind = nrow(x) - maxXY[, 'y'] + 1,
z_ind = rep(NA, nrow(maxXY))
)
# Append value of objective at local maxima.
for (i in 1:nrow(maxXY)) {
loc_max_out$z_ind[i] <- x[loc_max_out$x_ind[i], loc_max_out$y_ind[i]]
# loc_max_out$z_ind[i] <- x[loc_max_out$y_ind[i], loc_max_out$x_ind[i]]
}
return(loc_max_out)
}
test_2 <- c(1,1,2,2,3,3,4,3,2,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_2))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_2)),
nrow = length(test_1), ncol = length(test_2))
loc_max <- find_local_max(x = test_mat)
loc_max
test_mat
find_local_max <- function(x) {
## Convert it to a raster object
r <- raster(x)
# extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
extent(r) <- extent(c(0, ncol(x), 0, nrow(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
# Notice the switched coordinates.
loc_max_out <- list(
# y_ind = ncol(x) - maxXY[, 'y'] + 1,
x_ind = nrow(x) - maxXY[, 'y'] + 1,
y_ind = maxXY[, 'x'],
z_ind = rep(NA, nrow(maxXY))
)
# Append value of objective at local maxima.
for (i in 1:nrow(maxXY)) {
loc_max_out$z_ind[i] <- x[loc_max_out$x_ind[i], loc_max_out$y_ind[i]]
# loc_max_out$z_ind[i] <- x[loc_max_out$y_ind[i], loc_max_out$x_ind[i]]
}
return(loc_max_out)
}
test_2 <- c(1,1,2,2,3,3,4,3,2,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_2))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_2)),
nrow = length(test_1), ncol = length(test_2))
loc_max <- find_local_max(x = test_mat)
test_mat
loc_max
test_1 <- c(1,1,2,3,3,2,1,1,5,6,7,7,4,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_1))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_1)),
nrow = length(test_1), ncol = length(test_1))
loc_max <- find_local_max(x = test_mat)
loc_max
test_mat
loc_max
loc_max <- find_local_max(x = test_1)
loc_max <- find_local_max(x = as.array(test_1))
cbind(test_1 - 1, test_1, test_1 - 1)
test_1_array <- as.array(cbind(test_1 - 1, test_1, test_1 - 1))
test_1_array
loc_max <- find_local_max(x = as.array(test_1_array))
loc_max
test_1
test_1_array <- as.array(cbind(test_1 - 1, test_1 + 0.2*runif(length(test_1)), test_1 - 1))
loc_max <- find_local_max(x = as.array(test_1_array))
loc_max
test_1
test_1_array[, 2]
test_2_array <- as.array(cbind(test_2 - 1, test_2 + 0.2*runif(length(test_2)), test_2 - 1))
loc_max <- find_local_max(x = as.array(test_2_array))
loc_max
test_2_array <- as.array(cbind(test_2 - 1, test_2 + 0.2*runif(length(test_2)), test_2 - 1))
loc_max <- find_local_max(x = as.array(test_2_array))
test_2_array[, 2]
loc_max
test_2_array
test_1 <- c(1,1,2,3,3,2,1,1,5,6,7,7,4,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_1))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_1)),
nrow = length(test_1), ncol = length(test_1))
loc_max <- find_local_max(x = test_mat)
loc_max
dim(test_mat)
# Test with missing values.
test_mat[7, 7] <- NA
loc_max <- find_local_max(x = test_mat)
loc_max
# Test with missing values.
test_mat[7, 7] <- NA
test_mat[4, 5] <- NA
loc_max <- find_local_max(x = test_mat)
loc_max
dim(test_2)
test_1 <- c(1,1,2,3,3,2,1,1,5,6,7,7,4,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_1))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_1)),
nrow = length(test_1), ncol = length(test_1))
# Test with missing values.
test_mat[7, 7] <- NA # Not a local max - no change.
test_mat[4, 5] <- NA # Local max - replaced with neighbor.
loc_max <- find_local_max(x = test_mat)
loc_max
test_1 <- c(1,1,2,3,3,2,1,1,5,6,7,7,4,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_1))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_1)),
nrow = length(test_1), ncol = length(test_1))
# Test with missing values.
test_mat[7, 7] <- NA # Not a local max - no change.
test_mat[4, 5] <- NA # Local max - replaced with neighbor.
loc_max <- find_local_max(x = test_mat)
loc_max
test_1 <- c(1,1,2,3,3,2,1,1,5,6,7,7,4,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_1))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_1)),
nrow = length(test_1), ncol = length(test_1))
loc_max <- find_local_max(x = test_mat)
loc_max
dim(test_mat)
test_2 <- c(1,1,2,2,3,3,4,3,2,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_2))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_2)),
nrow = length(test_1), ncol = length(test_2))
loc_max <- find_local_max(x = test_mat)
loc_max
test_1 <- c(1,1,2,3,3,2,1,1,5,6,7,7,4,2)
test_mat <- as.array(t(t(test_1)) %*% t(test_1))
test_mat <- test_mat + matrix(0.2*runif(length(test_1)*length(test_1)),
nrow = length(test_1), ncol = length(test_1))
loc_max <- find_local_max(x = test_mat)
loc_max
find_local_max <- function(x) {
## Convert it to a raster object
r <- raster(x)
# extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
extent(r) <- extent(c(0, ncol(x), 0, nrow(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
# Notice the switched coordinates.
loc_max_out <- list(
# y_ind = ncol(x) - maxXY[, 'y'] + 1,
x_ind = nrow(x) - maxXY[, 'y'] + 1,
y_ind = maxXY[, 'x'],
z_val = rep(NA, nrow(maxXY))
)
# Append value of objective at local maxima.
for (i in 1:nrow(maxXY)) {
loc_max_out$z_val[i] <- x[loc_max_out$x_ind[i], loc_max_out$y_ind[i]]
# loc_max_out$z_ind[i] <- x[loc_max_out$y_ind[i], loc_max_out$x_ind[i]]
}
return(loc_max_out)
}
find_local_max <- function(x) {
## Convert it to a raster object
r <- raster(x)
# extent(r) <- extent(c(0, nrow(x), 0, ncol(x)) + 0.5)
extent(r) <- extent(c(0, ncol(x), 0, nrow(x)) + 0.5)
## Find the maximum value within the 9-cell neighborhood of each cell
# f <- function(X) max(X, na.rm = TRUE)
# ww <- matrix(1, nrow = 3, ncol = 3) ## Weight matrix for cells in moving window
localmax <- focal(r,
fun = function(X) max(X, na.rm = TRUE),
w = matrix(1, nrow = 3, ncol = 3),
pad = TRUE, padValue = NA)
## Does each cell have the maximum value in its neighborhood?
r2 <- r == localmax
# Which(r2 == 1)
## Get x-y coordinates of those cells that are local maxima
maxXY <- xyFromCell(r2, Which(r2 == 1, cells = TRUE))
# Obtain the proper y-coordinates.
# Notice the switched coordinates.
loc_max_out <- list(
# y_ind = ncol(x) - maxXY[, 'y'] + 1,
row = nrow(x) - maxXY[, 'y'] + 1,
col = maxXY[, 'x'],
value = rep(NA, nrow(maxXY))
)
# Append value of objective at local maxima.
for (i in 1:nrow(maxXY)) {
loc_max_out$value[i] <- x[loc_max_out$row[i], loc_max_out$col[i]]
# loc_max_out$z_ind[i] <- x[loc_max_out$y_ind[i], loc_max_out$x_ind[i]]
}
return(loc_max_out)
}
is.null(NA)
testNA <- NA
testNA
?raster
?extent
?focal
?xyFromCell
library(devtools)
install.packages('devtools')
library(devtools)
install.packages('backports')
install.packages('backports')
install.packages('devtools')
library(devtoools)
library(devtools)
library('devtools')
version
library('devtools')
install.packages('devtools')
library('devtools')
